{"version":3,"sources":["components/contacts/contactsItem/ContactsItem.module.css","components/form/Form.module.css","components/Phonebook.module.css","components/section/Section.module.css","components/findContact/Find.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/form/Form.jsx","components/section/Section.jsx","components/contacts/contactsItem/ContactsItem.jsx","components/contacts/ContactsList.jsx","components/findContact/FindContact.jsx","components/notification/Notification.js","components/Phonebook.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactSuccess","createAction","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactsSuccess","removeContactsError","deleteContact","setFilter","setAlert","axios","defaults","baseURL","addNewContact","payload","dispatch","post","then","response","data","catch","error","finally","fetchContacts","get","removeContact","id","delete","getShowUsedAlert","state","reducerContacts","showUsedAlert","getShowEmptyAlert","showEmptyAlert","getContacts","contacts","filter","contact","name","toLowerCase","includes","getFilter","getLoading","loading","Form","number","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","props","onAddContact","this","setTimeout","onSubmit","type","className","styles","input","placeholder","onChange","button","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","Section","children","title","style","container","ContactsItem","onRemove","item","span","text","onClick","onHandleDeleteContact","map","Div","styled","div","Empty","Used","Phonebook","onFetchContacts","length","CSSTransition","in","timeout","classNames","unmountOnExit","App","createReducer","action","some","toString","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.514bdce5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactsItem_item__1fSDA\",\"span\":\"ContactsItem_span__tVeh7\",\"text\":\"ContactsItem_text__UJzQA\",\"button\":\"ContactsItem_button__3dtlF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Form_input__230-C\",\"button\":\"Form_button__1hhGh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Phonebook_enter__1SkcQ\",\"enterActive\":\"Phonebook_enterActive__9dXJd\",\"exit\":\"Phonebook_exit__2n3zf\",\"exitActive\":\"Phonebook_exitActive__9P14M\",\"appear\":\"Phonebook_appear__3qQU8\",\"appearActive\":\"Phonebook_appearActive__1VtrT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__h5ohf\",\"appear\":\"Section_appear__2oRCr\",\"appearActive\":\"Section_appearActive__1WIbs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Find_input__g4KCq\",\"button\":\"Find_button__2PWAQ\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContactRequest = createAction('contacts/addRequest');\nconst addContactSuccess = createAction('contacts/addSuccess');\nconst addContactError = createAction('contacts/addError');\n\nconst fetchContactsRequest = createAction('contacts/fetchRequest');\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess');\nconst fetchContactsError = createAction('contacts/fetchError');\n\nconst removeContactsRequest = createAction('contacts/removeRequest');\nconst removeContactsSuccess = createAction('contacts/removeSuccess');\nconst removeContactsError = createAction('contacts/removeError');\n\nconst deleteContact = createAction('@contact/deleteContact');\nconst setFilter = createAction('@contact/setFilter');\nconst setAlert = createAction('@contact/setAlert,');\n\nexport {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n    removeContactsRequest,\n    removeContactsSuccess,\n    removeContactsError,\n    deleteContact,\n    setFilter,\n    setAlert,\n};\n","import axios from 'axios';\n\nimport {\n    addContactSuccess,\n    addContactError,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n    removeContactsSuccess,\n    removeContactsError,\n} from './contactsActions';\n\naxios.defaults.baseURL = 'http://localhost:4000';\n\nconst addNewContact = payload => dispatch => {\n\n    dispatch(fetchContactsRequest());\n\n    axios\n        .post('/contacts', { ...payload })\n        .then(response => {\n            dispatch(addContactSuccess(response.data));\n        })\n        .catch(error => dispatch(addContactError(error)))\n        .finally(() => dispatch(fetchContactsRequest()));\n};\n\nconst fetchContacts = () => dispatch => {\n    dispatch(fetchContactsRequest());\n\n    axios\n        .get('/contacts')\n        .then(response => {\n            dispatch(fetchContactsSuccess(response.data));\n        })\n        .catch(error => dispatch(fetchContactsError(error)))\n        .finally(() => dispatch(fetchContactsRequest()));\n};\n\nconst removeContact = id => dispatch => {\n    dispatch(fetchContactsRequest());\n\n    axios\n        .delete(`/contacts/${id}`)\n        .then(() => {\n            dispatch(removeContactsSuccess(id));\n        })\n        .catch(error => dispatch(removeContactsError(error)))\n        .finally(() => dispatch(fetchContactsRequest()));\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addNewContact, fetchContacts, removeContact };\n","const getShowUsedAlert = state => state.reducerContacts.showUsedAlert;\nconst getShowEmptyAlert = state => state.reducerContacts.showEmptyAlert;\nconst getContacts = state =>\n    state.reducerContacts.contacts.filter(contact =>\n        contact.name\n            .toLowerCase()\n            .includes(state.reducerContacts.filter.toLowerCase()),\n    );\nconst getFilter = state => state.reducerContacts.filter;\nconst getLoading = state => state.reducerContacts.loading;\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    getShowUsedAlert,\n    getShowEmptyAlert,\n    getContacts,\n    getFilter,\n    getLoading,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../redux/contacts/contactsActions';\nimport contactsOperations from '../../redux/contacts/contactsOperations';\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\nimport styles from './Form.module.css';\n\nclass Form extends Component {\n    state = {\n        name: '',\n        number: '',\n    };\n\n    componentDidUpdate() {\n        if (this.props.showUsedAlert || this.props.showEmptyAlert) {\n            setTimeout(() => this.props.setAlert(), 2500);\n        }\n    }\n\n    handleInputChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.onAddContact({\n            name: this.state.name,\n            number: this.state.number,\n        });\n        this.setState({\n            name: '',\n            number: '',\n        });\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Name\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        className={styles.input}\n                        placeholder=\"Name\"\n                        value={this.state.name}\n                        onChange={this.handleInputChange}\n                    />\n                </label>\n\n                <label>\n                    Number\n                    <input\n                        type=\"text\"\n                        name=\"number\"\n                        className={styles.input}\n                        placeholder=\"Number\"\n                        value={this.state.number}\n                        onChange={this.handleInputChange}\n                    />\n                </label>\n\n                <button className={styles.button} type=\"submit\">\n                    Add contact\n                </button>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    showUsedAlert: contactsSelectors.getShowUsedAlert,\n    showEmptyAlert: contactsSelectors.getShowEmptyAlert,\n});\n\nconst mapDispatchToProps = {\n    onAddContact: contactsOperations.addNewContact,\n    setAlert,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Section.module.css';\n\nconst Section = ({ children, title }) => {\n    return (\n        <section className={style.container}>\n            {title && <h2>{title}</h2>}\n            {children}\n        </section>\n    );\n};\n\nexport default Section;\n\nSection.propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactsItem.module.css';\n\nconst ContactsItem = ({ id, name, number, onRemove }) => (\n    <li className={styles.item}>\n        <span className={styles.span}>√</span>\n        <p className={styles.text}>{name}</p>\n        <p className={styles.text}>{number}</p>\n\n        <button\n            id={id}\n            type=\"button\"\n            className={styles.button}\n            onClick={onRemove}\n        ></button>\n    </li>\n);\n\nexport default ContactsItem;\n\nContactsItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onRemove: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport ContactsItem from './contactsItem/ContactsItem';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contactsOperations';\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\n\nconst ContactsList = ({ contacts, deleteContact }) => {\n    const onHandleDeleteContact = e => {\n        const { id } = e.target;\n        deleteContact(id);\n    };\n    return (\n        <div>\n            {contacts.map(({ name, number, id }) => (\n                <ContactsItem\n                    key={id}\n                    name={name}\n                    number={number}\n                    id={id}\n                    onRemove={onHandleDeleteContact}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        contacts: contactsSelectors.getContacts(state),\n    };\n};\n\nconst mapDispatchToProps = {\n    deleteContact: contactsOperations.removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n\nContactsList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object.isRequired),\n    deleteContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsActions';\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\nimport styles from './Find.module.css';\n\nconst FindContact = ({ filter, setFilter }) => {\n    const onHandleChange = e => {\n        const { value } = e.target;\n        setFilter(value);\n    };\n    return (\n        <>\n            <input\n                type=\"text\"\n                className={styles.input}\n                placeholder=\"Find contacts by name\"\n                value={filter}\n                onChange={onHandleChange}\n            />\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setFilter: id => {\n            dispatch(setFilter(id));\n        },\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(FindContact);\n\nFindContact.propTypes = {\n    filter: PropTypes.string.isRequired,\n    setFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Div = styled.div`\n    width: 300px;\n    height: 80px;\n    background-color: tomato;\n    position: absolute;\n    border-radius: 5px;\n    top: 0;\n    right: 0;\n    opacity: 0.8;\n    p {\n        font-size: 25px;\n        padding: 10px;\n        text-align: center;\n    }\n`;\n\nexport const Empty = () => {\n    return (\n        <Div>\n            <p>All field must be filled.</p>\n        </Div>\n    );\n};\nexport const Used = () => {\n    return (\n        <Div>\n            <p>Is already in contacts.</p>\n        </Div>\n    );\n};\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\n// import Header from './header/Header';\nimport Form from './form/Form';\nimport Section from './section/Section';\nimport ContactsList from './contacts/ContactsList';\nimport FindContact from './findContact/FindContact';\nimport { Empty, Used } from './notification/Notification';\nimport contactsOperations from '../redux/contacts/contactsOperations';\nimport styles from './Phonebook.module.css';\n\nclass Phonebook extends Component {\n    componentDidMount() {\n        this.props.onFetchContacts();\n    }\n\n    render() {\n        return (\n            <>\n                {/* <CSSTransition\n                    in={true}\n                    appear={true}\n                    classNames={styles}\n                    timeout={500}\n                    unmountOnExit\n                >\n                    <Header title=\"\" />\n                </CSSTransition> */}\n\n                <Section title=\"Phonebook\">\n                    <Form />\n                </Section>\n\n                {this.props.loading && <h2>Loading</h2>}\n                {this.props.contacts.length > 1 && (\n                    <Section title=\"Finder contacts\">\n                        <FindContact />\n                    </Section>\n                )}\n\n                {this.props.contacts.length > 0 && (\n                    <Section title=\"My Contacts\">\n                        <ContactsList />\n                    </Section>\n                )}\n\n                <CSSTransition\n                    in={this.props.showEmptyAlert}\n                    timeout={250}\n                    classNames={styles}\n                    unmountOnExit\n                >\n                    <Empty />\n                </CSSTransition>\n\n                <CSSTransition\n                    in={this.props.showUsedAlert}\n                    timeout={250}\n                    classNames={styles}\n                    unmountOnExit\n                >\n                    <Used />\n                </CSSTransition>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    contacts: state.reducerContacts.contacts,\n    showUsedAlert: state.reducerContacts.showUsedAlert,\n    showEmptyAlert: state.reducerContacts.showEmptyAlert,\n    loading: state.reducerContacts.loading,\n});\n\nconst mapDispatchToProps = {\n    onFetchContacts: contactsOperations.fetchContacts,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\n","import React from 'react';\nimport Phonebook from './Phonebook';\n\nconst App = () => {\n    return (\n        <>\n            <Phonebook />\n        </>\n    );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport {\n    deleteContact,\n    setFilter,\n    setAlert,\n    addContactSuccess,\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    removeContactsSuccess,\n} from './contactsActions';\n\nconst initialState = {\n    contacts: [],\n    filter: '',\n    showEmptyAlert: false,\n    showUsedAlert: false,\n    loading: false,\n};\n\nconst reducerContacts = createReducer(\n    { ...initialState },\n    {\n        [addContactSuccess]: (state, action) => {\n            if (\n                state.contacts.some(\n                    contact => contact.name === action.payload.name,\n                )\n            ) {\n                return { ...state, showUsedAlert: !state.showUsedAlert };\n            } else if (!action.payload.name.length) {\n                return { ...state, showEmptyAlert: !state.showEmptyAlert };\n            } else\n                return {\n                    ...state,\n                    contacts: [...state.contacts, action.payload],\n                };\n        },\n\n        [fetchContactsSuccess]: (state, action) => ({\n            ...state,\n            contacts: [...action.payload],\n        }),\n\n        [fetchContactsRequest]: state => ({\n            ...state,\n            loading: !state.loading,\n        }),\n\n        [deleteContact]: (state, action) => ({\n            ...state,\n            contacts: [\n                ...state.contacts.filter(\n                    contact => contact.id !== action.payload,\n                ),\n            ],\n        }),\n        [removeContactsSuccess]: (state, action) => ({\n            ...state,\n            contacts: [\n                ...state.contacts.filter(\n                    contact => contact.id.toString() !== action.payload,\n                ),\n            ],\n        }),\n\n        [setFilter]: (state, action) => ({\n            ...state,\n            filter: action.payload,\n        }),\n\n        [setAlert]: state => ({\n            ...state,\n            showEmptyAlert: false,\n            showUsedAlert: false,\n        }),\n    },\n);\n\nexport default combineReducers({ reducerContacts });\n","import { configureStore } from '@reduxjs/toolkit';\nimport reducerContacts from './contacts/contactsReducer';\n\nconst store = configureStore({\n    reducer: reducerContacts,\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}